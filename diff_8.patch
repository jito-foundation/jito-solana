--- /Users/gabrielhicks/Staking/jito-mod/programs/vote/src/vote_state/mod.rs	2024-10-07 14:40:52
+++ /Users/gabrielhicks/Staking/jito-mod/jito-zan-ax/mod_files/programs/vote/src/vote_state/mod.rs	2024-10-07 14:43:03
@@ -741,6 +741,7 @@
     current_slot: Slot,
     timely_vote_credits: bool,
     deprecate_unused_legacy_vote_plumbing: bool,
+    pop_expired: bool,
 ) -> Result<(), VoteError> {
     check_slots_are_valid(vote_state, vote_slots, &vote.hash, slot_hashes)?;
     vote_slots.iter().for_each(|s| {
@@ -750,6 +751,7 @@
             current_slot,
             timely_vote_credits,
             deprecate_unused_legacy_vote_plumbing,
+            pop_expired,
         )
     });
     Ok(())
@@ -763,6 +765,7 @@
     current_slot: Slot,
     timely_vote_credits: bool,
     deprecate_unused_legacy_vote_plumbing: bool,
+    pop_expired: bool,
 ) -> Result<(), VoteError> {
     if vote.slots.is_empty() {
         return Err(VoteError::EmptySlots);
@@ -786,11 +789,16 @@
         current_slot,
         timely_vote_credits,
         deprecate_unused_legacy_vote_plumbing,
+        pop_expired,
     )
 }
 
 /// "unchecked" functions used by tests and Tower
-pub fn process_vote_unchecked(vote_state: &mut VoteState, vote: Vote) -> Result<(), VoteError> {
+pub fn process_vote_unchecked(
+    vote_state: &mut VoteState,
+    vote: Vote,
+    pop_expired: bool,
+) -> Result<(), VoteError> {
     if vote.slots.is_empty() {
         return Err(VoteError::EmptySlots);
     }
@@ -804,6 +812,7 @@
         0,
         true,
         true,
+        pop_expired,
     )
 }
 
@@ -815,7 +824,7 @@
 }
 
 pub fn process_slot_vote_unchecked(vote_state: &mut VoteState, slot: Slot) {
-    let _ = process_vote_unchecked(vote_state, Vote::new(vec![slot], Hash::default()));
+    let _ = process_vote_unchecked(vote_state, Vote::new(vec![slot], Hash::default()), true);
 }
 
 /// Authorize the given pubkey to withdraw or sign votes. This may be called multiple times,
@@ -1097,6 +1106,7 @@
         clock.slot,
         timely_vote_credits,
         deprecate_unused_legacy_vote_plumbing,
+        true,
     )?;
     if let Some(timestamp) = vote.timestamp {
         vote.slots
@@ -1280,7 +1290,7 @@
             134, 135,
         ]
         .into_iter()
-        .for_each(|v| vote_state.process_next_vote_slot(v, 4, 0, false, true));
+        .for_each(|v| vote_state.process_next_vote_slot(v, 4, 0, false, true, true));
 
         let version1_14_11_serialized = bincode::serialize(&VoteStateVersions::V1_14_11(Box::new(
             VoteState1_14_11::from(vote_state.clone()),
@@ -1763,11 +1773,29 @@
         let slot_hashes: Vec<_> = vote.slots.iter().rev().map(|x| (*x, vote.hash)).collect();
 
         assert_eq!(
-            process_vote(&mut vote_state_a, &vote, &slot_hashes, 0, 0, true, true),
+            process_vote(
+                &mut vote_state_a,
+                &vote,
+                &slot_hashes,
+                0,
+                0,
+                true,
+                true,
+                true
+            ),
             Ok(())
         );
         assert_eq!(
-            process_vote(&mut vote_state_b, &vote, &slot_hashes, 0, 0, true, true),
+            process_vote(
+                &mut vote_state_b,
+                &vote,
+                &slot_hashes,
+                0,
+                0,
+                true,
+                true,
+                true
+            ),
             Ok(())
         );
         assert_eq!(recent_votes(&vote_state_a), recent_votes(&vote_state_b));
@@ -1780,12 +1808,12 @@
         let vote = Vote::new(vec![0], Hash::default());
         let slot_hashes: Vec<_> = vec![(0, vote.hash)];
         assert_eq!(
-            process_vote(&mut vote_state, &vote, &slot_hashes, 0, 0, true, true),
+            process_vote(&mut vote_state, &vote, &slot_hashes, 0, 0, true, true, true),
             Ok(())
         );
         let recent = recent_votes(&vote_state);
         assert_eq!(
-            process_vote(&mut vote_state, &vote, &slot_hashes, 0, 0, true, true),
+            process_vote(&mut vote_state, &vote, &slot_hashes, 0, 0, true, true, true),
             Err(VoteError::VoteTooOld)
         );
         assert_eq!(recent, recent_votes(&vote_state));
@@ -1845,7 +1873,7 @@
         let vote = Vote::new(vec![0], Hash::default());
         let slot_hashes: Vec<_> = vec![(*vote.slots.last().unwrap(), vote.hash)];
         assert_eq!(
-            process_vote(&mut vote_state, &vote, &slot_hashes, 0, 0, true, true),
+            process_vote(&mut vote_state, &vote, &slot_hashes, 0, 0, true, true, true),
             Ok(())
         );
         assert_eq!(
@@ -1861,7 +1889,7 @@
         let vote = Vote::new(vec![0], Hash::default());
         let slot_hashes: Vec<_> = vec![(*vote.slots.last().unwrap(), vote.hash)];
         assert_eq!(
-            process_vote(&mut vote_state, &vote, &slot_hashes, 0, 0, true, true),
+            process_vote(&mut vote_state, &vote, &slot_hashes, 0, 0, true, true, true),
             Ok(())
         );
 
@@ -1880,7 +1908,7 @@
         let vote = Vote::new(vec![0], Hash::default());
         let slot_hashes: Vec<_> = vec![(*vote.slots.last().unwrap(), vote.hash)];
         assert_eq!(
-            process_vote(&mut vote_state, &vote, &slot_hashes, 0, 0, true, true),
+            process_vote(&mut vote_state, &vote, &slot_hashes, 0, 0, true, true, true),
             Ok(())
         );
 
@@ -1897,7 +1925,7 @@
 
         let vote = Vote::new(vec![], Hash::default());
         assert_eq!(
-            process_vote(&mut vote_state, &vote, &[], 0, 0, true, true),
+            process_vote(&mut vote_state, &vote, &[], 0, 0, true, true, true),
             Err(VoteError::EmptySlots)
         );
     }
@@ -1978,6 +2006,7 @@
                     hash: Hash::new_unique(),
                     timestamp: None,
                 },
+                true,
             )
             .unwrap();
 
@@ -3090,7 +3119,7 @@
         // error with `VotesTooOldAllFiltered`
         let slot_hashes = vec![(3, Hash::new_unique()), (2, Hash::new_unique())];
         assert_eq!(
-            process_vote(&mut vote_state, &vote, &slot_hashes, 0, 0, true, true),
+            process_vote(&mut vote_state, &vote, &slot_hashes, 0, 0, true, true, true),
             Err(VoteError::VotesTooOldAllFiltered)
         );
 
@@ -3104,7 +3133,7 @@
             .1;
 
         let vote = Vote::new(vec![old_vote_slot, vote_slot], vote_slot_hash);
-        process_vote(&mut vote_state, &vote, &slot_hashes, 0, 0, true, true).unwrap();
+        process_vote(&mut vote_state, &vote, &slot_hashes, 0, 0, true, true, true).unwrap();
         assert_eq!(
             vote_state
                 .votes
@@ -3142,6 +3171,7 @@
                 0,
                 true,
                 true,
+                true,
             )
             .unwrap();
         }
