[Unit]
Description=Priority Fee Sharing Service
After=network.target

[Service]
Type=simple
User=root

# --------------- REQUIRED --------------------
# RPC URL - This RPC needs to be able to call `get_block`. If using a local RPC, ensure it is running with `--enable-rpc-transaction-history`
Environment=RPC_URL=YOUR_RPC_URL_HERE

# The account that the priority fees are paid out from - this is usually the identity keypair
Environment=PRIORITY_FEE_PAYER_KEYPAIR_PATH=YOUR_PRIORITY_FEE_PAYER_KEYPAIR_PATH

# The vote authority needed to create the PriorityFeeDistribution Account
# Can be found by running `solana vote-account YOUR_VOTE_ACCOUNT`
Environment=VOTE_AUTHORITY_KEYPAIR_PATH=YOUR_VOTE_AUTHORITY_KEYPAIR_PATH

# Your validator vote account address
Environment=VALIDATOR_VOTE_ACCOUNT=YOUR_VALIDATOR_VOTE_ACCOUNT_HERE

# Minimum balance in your priority fee keypair, no fees will be sent if below this amount
Environment=MINIMUM_BALANCE_SOL=YOUR_MINIMUM_BALANCE_SOL_HERE

# --------------- DEFAULTS --------------------

# How much priority fees to keep in bps ( Suggested 5000 - 50% )
Environment=COMMISSION_BPS=5000

# The Priority Fee Distribution Program
Environment=PRIORITY_FEE_DISTRIBUTION_PROGRAM=9yw8YAKz16nFmA9EvHzKyVCYErHAJ6ZKtmK6adDBvmuU

# The merkle root upload authority
Environment=MERKLE_ROOT_UPLOAD_AUTHORITY=2AxPPApUQWvo2JsB52iQC4gbEipAWjRvmnNyDHJgd6Pe

# --------------- PERFORMANCE --------------------
# Rocks DB that holds all priority fee records - this will be created by the script and can go anywhere
Environment=FEE_RECORDS_DB_PATH=/var/lib/solana/fee_records

# How many transfers to send in one transaction
Environment=CHUNK_SIZE=1

# How many transactions to call per loop
Environment=CALL_LIMIT=1

# --------------- PATH REQUIRED --------------------
# Replace this with the actual path to the binary - call `which priority-fee-sharing` to get the path
ExecStart=$(which priority-fee-share) run

Restart=on-failure
RestartSec=5s

[Install]
WantedBy=multi-user.target
